plugins {
    id 'idea'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'maven-publish'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
jarJar.enable()

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'nears'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'nears'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'nears',
                '--all', '--output', file('src/generated/resources/'),
                '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

jarJar.enable()

repositories {
    maven {
        name 'Progwml6 Maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'Tterag Maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        name 'Appleskin'
        url "https://maven.ryanliptak.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "${registrate_version_spec}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("squeek.appleskin:appleskin-forge:${appleskin_version}")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

//mixin {
//    add sourceSets.main, "${modid}.refmap.json"
//    config "${modid}.mixins.json"
//
//    debug.verbose = true
//    debug.export = true
//}


jar {
    classifier 'slim'
    from(['LICENSE_FABRIC','LICENSE_FORGE']) {
        rename {
            "${it}_" + project.modid.toUpperCase(Locale.ROOT)
        }
    }
    manifest {
        attributes([
            "Specification-Title"     : project.modid,
            "Specification-Vendor"    : "dragonsplus",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "dragonsplus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.jarJar {
    classifier ''
    from(['LICENSE_FABRIC','LICENSE_FORGE']) {
        rename {
            "${it}_" + project.modid.toUpperCase(Locale.ROOT)
        }
    }
    finalizedBy 'reobfJarJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            fg.component(it)
            jarJar.component(it)
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}